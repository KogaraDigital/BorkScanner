name: Build & Release

on:
  push:
    tags:
      - 'v*.*.*'

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 8.0.x

      - name: Restore dependencies
        run: dotnet restore

      - name: Build and publish
        run: |
          PROJECT_FILE=$(find . -name "*.csproj" | head -n 1)
          if [[ -z "$PROJECT_FILE" ]]; then
            echo "No .csproj file found!"
            exit 1
          fi

          if [[ "${{ matrix.os }}" == "ubuntu-latest" ]]; then
            dotnet publish "$PROJECT_FILE" -c Release -r linux-x64 --self-contained -o ./publish/linux
          else
            dotnet publish "$PROJECT_FILE" -c Release -r win-x64 --self-contained -o ./publish/windows
          fi
        shell: bash

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: BorkScanner-${{ matrix.os }}
          path: ./publish/*

  nuget:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 8.0.x

      - name: Restore dependencies
        run: dotnet restore

      - name: Pack NuGet
        run: |
          PROJECT_FILE=$(find . -name "*.csproj" | head -n 1)
          if [[ -z "$PROJECT_FILE" ]]; then
            echo "No .csproj file found!"
            exit 1
          fi
          dotnet pack "$PROJECT_FILE" -c Release -o ./nupkg

      - name: Push to NuGet
        run: dotnet nuget push ./nupkg/*.nupkg -k ${{ secrets.NUGET_API_KEY }} -s https://api.nuget.org/v3/index.json

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./publish

      - name: Create GitHub Release
        uses: actions/create-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          body: "Release notes here"
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Windows executable
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./publish/windows/BorkScanner.exe
          asset_name: BorkScanner-windows.exe
          asset_content_type: application/octet-stream

      - name: Upload Linux executable
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./publish/linux/BorkScanner
          asset_name: BorkScanner-linux
          asset_content_type: application/octet-stream
